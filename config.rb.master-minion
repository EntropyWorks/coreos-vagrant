# coreos-vagrant is configured through a series of configuration
# options (global ruby variables) which are detailed below. To modify
# these options, first copy this file to "config.rb". Then simply
# uncomment the necessary lines, leaving the $, and replace everything
# after the equals sign..

# Size of the CoreOS cluster created by Vagrant
$master_instances=1
$num_instances=3

# Official CoreOS channel from which updates should be downloaded
$update_channel='alpha'

# Log the serial consoles of CoreOS VMs to log/
# Enable by setting value to true, disable with false
# WARNING: Serial logging is known to result in extremely high CPU usage with
# VirtualBox, so should only be used in debugging situations
#$enable_serial_logging=false

# Enable port forwarding of Docker TCP socket
# Set to the TCP port you want exposed on the *host* machine, default is 2375
# If 2375 is used, Vagrant will auto-increment (e.g. in the case of $num_instances > 1)
# You can then use the docker tool locally by setting the following env var:
#   export DOCKER_HOST='tcp://127.0.0.1:2375'
$master_private_ip='172.17.8.11'
$expose_docker_tcp=2375
$expose_etcd_tcp=4001

# Setting for VirtualBox VMs
$vb_gui = false
$vb_memory = 1024
$vb_cpus = 1

if File.exists?('user-data.master') && ARGV[0].eql?('up') 
  if File.exists?('user-data.master.yaml')
    puts "Already have user-data.master.yaml" 
  else
    require 'open-uri'
    token = open('https://discovery.etcd.io/new').read
    file_names = ['user-data.master']
    file_names.each do |file_name|
        text = File.read(file_name)
        new_contents = text.gsub(/AUTO_REPLACED_WITH_DISCOVERY_URL/, token )

        # To merely print the contents of the file, use:
        puts token

        # To write changes to the file, use:
        File.open(file_name + '.yaml', "w") {|file| file.puts new_contents }
    end
  end
end

if File.exists?('user-data.node') && ARGV[0].eql?('up') 
  if File.exists?('user-data.node.yaml')
    puts "Already have user-data.node.yaml" 
  else
    file_names = ['user-data.node']
    file_names.each do |file_name|
        text = File.read(file_name)
        new_contents = text.gsub(/<master-private-ip>/, $master_private_ip )

        # To merely print the contents of the file, use:

        # To write changes to the file, use:
        File.open(file_name + '.yaml', "w") {|file| file.puts new_contents }
    end
  end
end
